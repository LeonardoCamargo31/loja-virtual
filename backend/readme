Para inicilizar, usa o comando : npx sequelize init


Imagine 3 progradores desenvolvendo um projeto, como vão manter a base igual? 
Com o uso de migrations, assim como você usa o Git para gerenciar mudanças no código-fonte
é possível usar migrações para acompanhar as alterações no banco de dados

Com as migrações, você pode transferir seu banco de dados existente para outro estado e vice-versa: 
essas transições de estado são salvas em arquivos de migração, que descrevem como chegar ao novo estado 
e como reverter as alterações para retornar ao estado antigo

Para criar nossa primeira migration

npx sequelize migration:create --name=create-users

Feito isso, devemos implementar a migration, depois de configurado, rodamos nossa migration para criar a tabela

npx sequelize db:migrate

Vemos no nosso cliente do banco, que a tabela users foi criada e uma tabela sequelizemeta ela armazenas todas as migrations que ele já rodou,
assim que ele identifica se a migration ja foi executada, ele verifica nessa tabela, identifica que não possui essa migration então executa



//----------TESTS-------------------

Criamos a pasta __tests__, o underline para ela ficar sempre em primeiro

lá no package, "dev": "nodemon src/server.js --ignore __tests__",
para o nodemon ignorar alterações no __tests__, para não iniciar novamente 

Então instalamos o jest, depois inicializamos com npx jest --init, que vai fazer algumas perguntas,

node...no...yes 

então ele cria o arquivo jest.config

testes de unidade, são testes em funções puras, ou seja passando os valores elas tem sempre o mesmo retorno, não tem inteferencia externa, 
nunca tocam em efeitos colaterias (como chamadas a api, cadastros na bd, ou seja recursos que podem dar errado)


Agora testes de integração é justamente o contrario, pois buscar testar justamente isso como chamadas a api, cadastros na bd e tudo mais, função não puras

//----------ENV-------------------
Agora vamos configurar variaveis de ambiente 

Durante os testes iremos criar usuario, deletar usuario, ou seja alterar o banco, e não é legal alterar o banco de desenvolvimento 
para isso usamos outra base, somente para os testes no sequelize podemos usar uma base sqlite, essa base funciona em formato de arquivo 
não preciso configurar uma base de dados.

assim criamos dois arquivos 

.env => a configuração do meu banco de desenvolvimento
.env.test => a configuração do meu banco de testes

faço a instalação do dotenv

no meu package

"pretest": "cross-env NODE_ENV=test sequelize db:migrate", que sera executado antes do test, cria as migrations nos ambientes de testes, para usar o banco de teste
"test": "cross-env NODE_ENV=test jest", meu teste 
"posttest": "cross-env NODE_ENV=test sequelize db:migrate:undo:all", depois do teste, eu desfaço todas as migrations

mas ao executar o teste veremos que não reconhece o NODE_ENV , então instalamos o pacote cross-env, e usamos assim cross-env NODE_ENV

Precisamos instalar o sqlite3, que sera usado pelo meu banco de teste

//----TDD

Eu crio o teste antes e depois desenvolvo


para testar uma rota na aplicação, o jest não vem com isso, instalamos o supertest 






entender o que preciso testar , o quanto preciso testar, o jest no terminal, ele retorna todos os arquivo da nossa aplicação no caso que vc configurou em jest.config
e quanto % foi testado, e em uncovered line estão as linhas que não foram testadas, se abrirmos o coverage/ lcov-report/index.html

tem uma interface que mostra todos os detalhes

mas tem arquivos que não precisamos testar, depende da aplicação claro, mas por exemplo as migrations, lá em jest.config collectCoverageFrom falamos isso "!src/database/migrations/**"